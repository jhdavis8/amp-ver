/* Reverse tree barrier in CIVL from AMP-VER
 * Jun-6-2021
 * Josh Davis
 * Verified Software Lab, Univ. of Delaware
 */

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include "../include/barrier.cvh"

typedef struct _node Node;

struct _node
{
  int count;
  Node* parent;
  bool sense;
  int depth;
};

struct _barrier
{
  int radix;
  bool* thread_sense;
  int leaves;
  Node** leaf;
  int nthread;
};

typedef struct _barrier Barrier;

Node* create_node(int r, Node* p) {
  Node* new_node = (Node*) malloc(sizeof(Node));
  new_node->sense = false;
  new_node->parent = p;
  new_node->count = r;
  return new_node;
}

void destroy_node(Node* node) {
  free(node);
}

void node_wait(Node* n, Barrier* b, int tid) {
  bool my_sense = b->thread_sense[tid];
  if ((tid % b->radix) == 0) {
    if (n->parent != NULL) {
      node_wait(n->parent, b, tid / b->radix);
    }
  }
  int position;
  $atomic {
    position = n->count--;
  }
  if (position == 1) {
    $atomic {
      n->count = b->radix;
    }
    n->sense = my_sense;
  } else {
    $when (n->sense == my_sense) {/* continue */}
  }
  b->thread_sense[tid] = !my_sense;
}

void build(Barrier* b, Node* parent, int depth) {
  if (depth == 0) {
    b->leaf[b->leaves++] = parent;
  } else {
    for (int i = 0; i < b->radix; i++) {
      Node* child = create_node(b->radix, parent);
      child->depth = depth;
      build(b, child, depth - 1);
    }
  }
}

Barrier* create_barrier(int n, int r) {
  Barrier* new_barrier = (Barrier*) malloc(sizeof(Barrier));
  new_barrier->radix = r;
  new_barrier->nthread = n;
  new_barrier->leaves = 0;
  new_barrier->leaf = (Node**) malloc(sizeof(Node*)*(n / r));
  int depth = 0;
  new_barrier->thread_sense = (bool*) malloc(sizeof(bool)*n);
  for (int i = 0; i < n; i++) new_barrier->thread_sense[i] = true;
  int curr_size = n;
  while (curr_size > 1) {
    depth++;
    curr_size = curr_size / r;
    $assert(curr_size > 0);
  }
  Node* root = create_node(r, NULL);
  root->depth = depth;
  build(new_barrier, root, depth - 1);
  return new_barrier;
}

void barrier_wait(Barrier* b, int tid) {
  Node* my_leaf = b->leaf[tid / b->radix];
  node_wait(my_leaf, b, tid);
}

void destroy_barrier(Barrier* b) {
  for (int i = 0; i < (b->nthread / b->radix); i++) destroy_node(b->leaf[i]);
  free(b->leaf);
  free(b->thread_sense);
  free(b);
}
