/* Sense reversing barrier in CIVL from AMP-VER
 * Jun-24-2021
 * Josh Davis
 * Verified Software Lab, Univ. of Delaware
 */

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include "../include/barrier.cvh"

struct _barrier
{
  bool* thread_sense;
  int size;
  int count;
  bool sense;
};

typedef struct _barrier Barrier;

Barrier* create_barrier(int n, int r) {
  Barrier* new_barrier = (Barrier*) malloc(sizeof(Barrier));
  new_barrier->count = n;
  new_barrier->size = n;
  new_barrier->sense = false;
  new_barrier->thread_sense = (bool*) malloc(sizeof(bool)*n);
  for (int i = 0; i < n; i++) new_barrier->thread_sense[i] = true;
  return new_barrier;
}

void barrier_wait(Barrier* b, int tid) {
  bool my_sense = b->thread_sense[tid];
  int position;
  $atomic {
    position = b->count--;
  }
  if (position == 1) {
    $atomic {
      b->count = b->size;
    }
    b->sense = my_sense;
  } else {
    $when (b->sense == my_sense) {/* continue */}
  }
  b->thread_sense[tid] = !my_sense;
}

void destroy_barrier(Barrier* b) {
  free(b->thread_sense);
  free(b);
}
