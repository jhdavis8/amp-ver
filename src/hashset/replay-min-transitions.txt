CIVL v1.22+ of 2023-10-09 -- http://vsl.cis.udel.edu/civl

Initial state:

State (id=9)
| Path condition
| | true
| Dynamic scopes
| | dyscope d0 (parent=NULL, static=1)
| | | variables
| | | | _civl_root = NULL
| | | | root = NULL
| | | | VAL_B = NULL
| | | | HASH_B = NULL
| Process states
| | process 0
| | | call stack
| | | | Frame[function=main, location=0, StripedCuckooHashSet.cvl:320.0-386.0 "int main() {\n\n ... }", dyscope=d0]

Executed by p0 from State (id=9)
  0->1: _civl_root=(scope_t(0)) at StripedCuckooHashSet.cvl:320.0-386.0 "int main() {\n\n ... }"
  1->2: root=(scope_t(0)) at ArrayList.cvl:16.0-18 "$scope root = $here"
  2->3: VAL_B=4 at hash.cvl:23.0-17 "$input int VAL_B=8"
  3->4: HASH_B=3 at hash.cvl:24.0-18 "$input int HASH_B=3"
--> State (id=18)

Step 1: Executed by p0 from State (id=18)
  4->78: s=Set_create() at StripedCuckooHashSet.cvl:322.2-21 "Set s = Set_create()"
--> State (id=21)

Step 2: Executed by p0 from State (id=21)
  78->79: result=(struct Set*)$malloc((scope_t(0)), CIVL_SIZEOF(4371)) [result:=&<d0>heap.malloc0[0][0]] at StripedCuckooHashSet.cvl:39.2-40 "Set result = malloc(sizeof ... )"
--> State (id=27)

Step 3: Executed by p0 from State (id=27)
  79->80: (*(&<d0>heap.malloc0[0][0])).capacity=1 at StripedCuckooHashSet.cvl:40.2-27.25 "result->capacity = 1"
  80->81: i=0 at StripedCuckooHashSet.cvl:41.7-15 "int i = 0"
--> State (id=33)

Step 4: Executed by p0 from State (id=33)
  81->82: LOOP_BODY_ENTER (guard: 0<2) [$assume(true)] at StripedCuckooHashSet.cvl:41.18-22 "i < 2"
--> State (id=35)

Step 5: Executed by p0 from State (id=35)
  82->83: (*(&<d0>heap.malloc0[0][0])).table[0]=((struct ArrayList)**)$malloc((scope_t(0)), 1*sizeof((struct ArrayList)*)) [(*(&<d0>heap.malloc0[0][0])).table[0]:=&<d0>heap.malloc1[0][0]] at StripedCuckooHashSet.cvl:42.4-64 "result->table[i] =  ... )"
  83->84: j=0 at StripedCuckooHashSet.cvl:43.9-17 "int j = 0"
--> State (id=43)

Step 6: Executed by p0 from State (id=43)
  84->85: LOOP_BODY_ENTER (guard: 0<(*(result)).0) [$assume(true)] at StripedCuckooHashSet.cvl:43.20-39 "j < result->capacity"
--> State (id=45)

Step 7: Executed by p0 from State (id=45)
  85->139: *(&<d0>heap.malloc1[0][0]+j)=ArrayList_create() at StripedCuckooHashSet.cvl:44.6-45 "result->table[i][j] ... )"
--> State (id=48)

Step 8: Executed by p0 from State (id=48)
  139->140: result=(struct ArrayList*)$malloc((scope_t(0)), CIVL_SIZEOF(307)) [result:=&<d0>heap.malloc5[0][0]] at ArrayList.cvl:19.2-71 "ArrayList result = (ArrayList) ... )"
--> State (id=54)

Step 9: Executed by p0 from State (id=54)
  140->141: $seq_init(&<d0>heap.malloc5[0][0].data, 0, ((void)*)0) at ArrayList.cvl:20.2-34 "$seq_init(&result->data, 0 ... )"
--> State (id=58)

Step 10: Executed by p0 from State (id=58)
  141->RET: ArrayList_create(...) return &<d0>heap.malloc5[0][0] [*(&<d0>heap.malloc1[0][0]+j):=&<d0>heap.malloc5[0][0]] at ArrayList.cvl:21.2-15 "return result;"
  86->84: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:43.42 "j"
--> State (id=64)

Step 11: Executed by p0 from State (id=64)
  84->87: LOOP_BODY_EXIT (guard: ! (1<(*(result)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:43.20-39 "j < result->capacity"
  87->81: i=0+1 [i:=1] at StripedCuckooHashSet.cvl:41.25 "i"
--> State (id=68)

Step 12: Executed by p0 from State (id=68)
  81->82: LOOP_BODY_ENTER (guard: 1<2) [$assume(true)] at StripedCuckooHashSet.cvl:41.18-22 "i < 2"
--> State (id=70)

Step 13: Executed by p0 from State (id=70)
  82->83: (*(&<d0>heap.malloc0[0][0])).table[1]=((struct ArrayList)**)$malloc((scope_t(0)), 1*sizeof((struct ArrayList)*)) [(*(&<d0>heap.malloc0[0][0])).table[1]:=&<d0>heap.malloc1[1][0]] at StripedCuckooHashSet.cvl:42.4-64 "result->table[i] =  ... )"
  83->84: j=0 at StripedCuckooHashSet.cvl:43.9-17 "int j = 0"
--> State (id=78)

Step 14: Executed by p0 from State (id=78)
  84->85: LOOP_BODY_ENTER (guard: 0<(*(result)).0) [$assume(true)] at StripedCuckooHashSet.cvl:43.20-39 "j < result->capacity"
--> State (id=80)

Step 15: Executed by p0 from State (id=80)
  85->139: *(&<d0>heap.malloc1[1][0]+j)=ArrayList_create() at StripedCuckooHashSet.cvl:44.6-45 "result->table[i][j] ... )"
--> State (id=83)

Step 16: Executed by p0 from State (id=83)
  139->140: result=(struct ArrayList*)$malloc((scope_t(0)), CIVL_SIZEOF(307)) [result:=&<d0>heap.malloc5[1][0]] at ArrayList.cvl:19.2-71 "ArrayList result = (ArrayList) ... )"
--> State (id=89)

Step 17: Executed by p0 from State (id=89)
  140->141: $seq_init(&<d0>heap.malloc5[1][0].data, 0, ((void)*)0) at ArrayList.cvl:20.2-34 "$seq_init(&result->data, 0 ... )"
--> State (id=93)

Step 18: Executed by p0 from State (id=93)
  141->RET: ArrayList_create(...) return &<d0>heap.malloc5[1][0] [*(&<d0>heap.malloc1[1][0]+j):=&<d0>heap.malloc5[1][0]] at ArrayList.cvl:21.2-15 "return result;"
  86->84: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:43.42 "j"
--> State (id=99)

Step 19: Executed by p0 from State (id=99)
  84->87: LOOP_BODY_EXIT (guard: ! (1<(*(result)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:43.20-39 "j < result->capacity"
  87->81: i=1+1 [i:=2] at StripedCuckooHashSet.cvl:41.25 "i"
--> State (id=103)

Step 20: Executed by p0 from State (id=103)
  81->88: LOOP_BODY_EXIT (guard: ! (2<2)) [$assume(true)] at StripedCuckooHashSet.cvl:41.18-22 "i < 2"
  88->89: i=0 at StripedCuckooHashSet.cvl:48.7-15 "int i = 0"
--> State (id=107)

Step 21: Executed by p0 from State (id=107)
  89->90: LOOP_BODY_ENTER (guard: 0<2) [$assume(true)] at StripedCuckooHashSet.cvl:48.18-22 "i < 2"
--> State (id=109)

Step 22: Executed by p0 from State (id=109)
  90->91: (*(&<d0>heap.malloc0[0][0])).lock[0]=((struct Lock)**)$malloc((scope_t(0)), 1*sizeof((struct Lock)*)) [(*(&<d0>heap.malloc0[0][0])).lock[0]:=&<d0>heap.malloc2[0][0]] at StripedCuckooHashSet.cvl:49.4-58 "result->lock[i] =  ... )"
  91->92: j=0 at StripedCuckooHashSet.cvl:50.9-17 "int j = 0"
--> State (id=117)

Step 23: Executed by p0 from State (id=117)
  92->93: LOOP_BODY_ENTER (guard: 0<(*(result)).0) [$assume(true)] at StripedCuckooHashSet.cvl:50.20-39 "j < result->capacity"
--> State (id=119)

Step 24: Executed by p0 from State (id=119)
  93->123: *(&<d0>heap.malloc2[0][0]+j)=Lock_create() at StripedCuckooHashSet.cvl:51.6-39 "result->lock[i][j] ... )"
--> State (id=122)

Step 25: Executed by p0 from State (id=122)
  123->124: result=(struct Lock*)$malloc((scope_t(0)), CIVL_SIZEOF(310)) [result:=&<d0>heap.malloc6[0][0]] at ReentrantLock.cvl:19.2-42 "Lock result = malloc(sizeof ... )"
--> State (id=128)

Step 26: Executed by p0 from State (id=128)
  124->125: (*(&<d0>heap.malloc6[0][0])).owner=$proc_null at ReentrantLock.cvl:20.2-27 "result->owner = $proc_null"
--> State (id=132)

Step 27: Executed by p0 from State (id=132)
  125->126: (*(&<d0>heap.malloc6[0][0])).count=0 at ReentrantLock.cvl:21.2-18 "result->count = 0"
--> State (id=135)

Step 28: Executed by p0 from State (id=135)
  126->RET: Lock_create(...) return &<d0>heap.malloc6[0][0] [*(&<d0>heap.malloc2[0][0]+j):=&<d0>heap.malloc6[0][0]] at ReentrantLock.cvl:22.2-15 "return result;"
  94->92: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:50.42 "j"
--> State (id=141)

Step 29: Executed by p0 from State (id=141)
  92->95: LOOP_BODY_EXIT (guard: ! (1<(*(result)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:50.20-39 "j < result->capacity"
  95->89: i=0+1 [i:=1] at StripedCuckooHashSet.cvl:48.25 "i"
--> State (id=145)

Step 30: Executed by p0 from State (id=145)
  89->90: LOOP_BODY_ENTER (guard: 1<2) [$assume(true)] at StripedCuckooHashSet.cvl:48.18-22 "i < 2"
--> State (id=147)

Step 31: Executed by p0 from State (id=147)
  90->91: (*(&<d0>heap.malloc0[0][0])).lock[1]=((struct Lock)**)$malloc((scope_t(0)), 1*sizeof((struct Lock)*)) [(*(&<d0>heap.malloc0[0][0])).lock[1]:=&<d0>heap.malloc2[1][0]] at StripedCuckooHashSet.cvl:49.4-58 "result->lock[i] =  ... )"
  91->92: j=0 at StripedCuckooHashSet.cvl:50.9-17 "int j = 0"
--> State (id=155)

Step 32: Executed by p0 from State (id=155)
  92->93: LOOP_BODY_ENTER (guard: 0<(*(result)).0) [$assume(true)] at StripedCuckooHashSet.cvl:50.20-39 "j < result->capacity"
--> State (id=157)

Step 33: Executed by p0 from State (id=157)
  93->123: *(&<d0>heap.malloc2[1][0]+j)=Lock_create() at StripedCuckooHashSet.cvl:51.6-39 "result->lock[i][j] ... )"
--> State (id=160)

Step 34: Executed by p0 from State (id=160)
  123->124: result=(struct Lock*)$malloc((scope_t(0)), CIVL_SIZEOF(310)) [result:=&<d0>heap.malloc6[1][0]] at ReentrantLock.cvl:19.2-42 "Lock result = malloc(sizeof ... )"
--> State (id=166)

Step 35: Executed by p0 from State (id=166)
  124->125: (*(&<d0>heap.malloc6[1][0])).owner=$proc_null at ReentrantLock.cvl:20.2-27 "result->owner = $proc_null"
--> State (id=170)

Step 36: Executed by p0 from State (id=170)
  125->126: (*(&<d0>heap.malloc6[1][0])).count=0 at ReentrantLock.cvl:21.2-18 "result->count = 0"
--> State (id=173)

Step 37: Executed by p0 from State (id=173)
  126->RET: Lock_create(...) return &<d0>heap.malloc6[1][0] [*(&<d0>heap.malloc2[1][0]+j):=&<d0>heap.malloc6[1][0]] at ReentrantLock.cvl:22.2-15 "return result;"
  94->92: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:50.42 "j"
--> State (id=179)

Step 38: Executed by p0 from State (id=179)
  92->95: LOOP_BODY_EXIT (guard: ! (1<(*(result)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:50.20-39 "j < result->capacity"
  95->89: i=1+1 [i:=2] at StripedCuckooHashSet.cvl:48.25 "i"
--> State (id=183)

Step 39: Executed by p0 from State (id=183)
  89->96: LOOP_BODY_EXIT (guard: ! (2<2)) [$assume(true)] at StripedCuckooHashSet.cvl:48.18-22 "i < 2"
--> State (id=185)

Step 40: Executed by p0 from State (id=185)
  96->RET: Set_create(...) return &<d0>heap.malloc0[0][0] [s:=&<d0>heap.malloc0[0][0]] at StripedCuckooHashSet.cvl:54.2-15 "return result;"
--> State (id=189)

Step 41: Executed by p0 from State (id=189)
  5->6: $elaborate_domain(($domain(1))(0..1#1)) [$assume(true)] at StripedCuckooHashSet.cvl:324.21-26 "0 .. 1"
  6->7: $parfor(i0: ($domain(1))(0..1#1)) $spawn _par_proc0(i0) at StripedCuckooHashSet.cvl:324.2-8 "$parfor"
  7->8: _civl_ir1=0 at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=203)

Step 42: Executed by p0 from State (id=203)
  8->9: LOOP_BODY_ENTER (guard: 0<_dom_size0) [$assume(true)] at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=205)

Step 43: Executed by p1 from State (id=205)
  316->317: TRUE_BRANCH_IF (guard: 0==0) [$assume(true)] at StripedCuckooHashSet.cvl:325.18 "{"
--> State (id=207)

Step 44: Executed by p1 from State (id=207)
  317->18: Set_add(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:326.6-18 "Set_add(s, 0)"
  18->19: y=-1 at StripedCuckooHashSet.cvl:154.2-9 "T y = -1"
--> State (id=212)

Step 45: Executed by p1 from State (id=212)
  19->176: acquire(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:155.2-14 "acquire(s, x)"
--> State (id=215)

Step 46: Executed by p1 from State (id=215)
  176->172: $sef$2=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:82.26-36 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$2:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=237)

Step 47: Executed by p2 from State (id=237)
  316->320: FALSE_BRANCH_IF (guard: ! (1==0)) [$assume(true)] at StripedCuckooHashSet.cvl:330.4 "}"
--> State (id=239)

Step 48: Executed by p2 from State (id=239)
  320->18: Set_add(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:329.6-18 "Set_add(s, 0)"
  18->19: y=-1 at StripedCuckooHashSet.cvl:154.2-9 "T y = -1"
--> State (id=244)

Step 49: Executed by p2 from State (id=244)
  19->176: acquire(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:155.2-14 "acquire(s, x)"
--> State (id=247)

Step 50: Executed by p2 from State (id=247)
  176->172: $sef$2=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:82.26-36 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$2:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=269)

Step 51: Executed by p2 from State (id=269)
  177->178: lock0=* (&<d0>heap.malloc2[0][0]+($sef$2%1)) [lock0:=&<d0>heap.malloc6[0][0]] at StripedCuckooHashSet.cvl:82.2-56 "Lock lock0 = s->lock ... ]"
--> State (id=272)

Step 52: Executed by p2 from State (id=272)
  178->174: $sef$3=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:83.26-36 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$3:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=294)

Step 53: Executed by p2 from State (id=294)
  179->180: lock1=* (&<d0>heap.malloc2[1][0]+($sef$3%1)) [lock1:=&<d0>heap.malloc6[1][0]] at StripedCuckooHashSet.cvl:83.2-56 "Lock lock1 = s->lock ... ]"
--> State (id=297)

Step 54: Executed by p2 from State (id=297)
  180->129: Lock_acquire(&<d0>heap.malloc6[0][0]) at StripedCuckooHashSet.cvl:84.2-20 "Lock_acquire(lock0)"
--> State (id=300)

Step 55: Executed by p2 from State (id=300)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p2==(*(l)).0 [$sef$41:=false] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->131: TRUE_BRANCH_IF (guard: !false) at ReentrantLock.cvl:45.20 "{"
--> State (id=318)

Step 56: Executed by p2 from State (id=318)
  131->311: Lock_acquire_aux(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:46.4-22 "Lock_acquire_aux(l)"
  311->312: (*(&<d0>heap.malloc6[0][0])).owner=$self [(*(&<d0>heap.malloc6[0][0])).owner:=p2] at ReentrantLock.cvl:31.32-47 "l->owner = $self"
  312->RET: Lock_acquire_aux(...) return at ReentrantLock.cvl:32.0 "}"
--> State (id=338)

Step 57: Executed by p2 from State (id=338)
  132->313: lock_increment(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[0][0])).count=0+1 [(*(&<d0>heap.malloc6[0][0])).count:=1] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
--> State (id=358)

Step 58: Executed by p2 from State (id=358)
  181->129: Lock_acquire(&<d0>heap.malloc6[1][0]) at StripedCuckooHashSet.cvl:85.2-20 "Lock_acquire(lock1)"
--> State (id=361)

Step 59: Executed by p2 from State (id=361)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p2==(*(l)).0 [$sef$41:=false] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->131: TRUE_BRANCH_IF (guard: !false) at ReentrantLock.cvl:45.20 "{"
--> State (id=379)

Step 60: Executed by p2 from State (id=379)
  131->311: Lock_acquire_aux(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:46.4-22 "Lock_acquire_aux(l)"
  311->312: (*(&<d0>heap.malloc6[1][0])).owner=$self [(*(&<d0>heap.malloc6[1][0])).owner:=p2] at ReentrantLock.cvl:31.32-47 "l->owner = $self"
  312->RET: Lock_acquire_aux(...) return at ReentrantLock.cvl:32.0 "}"
--> State (id=399)

Step 61: Executed by p2 from State (id=399)
  132->313: lock_increment(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[1][0])).count=0+1 [(*(&<d0>heap.malloc6[1][0])).count:=1] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
  182->RET: acquire(...) return at StripedCuckooHashSet.cvl:86.0 "}"
--> State (id=421)

Step 62: Executed by p2 from State (id=421)
  20->172: $sef$18=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:156.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$18:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=443)

Step 63: Executed by p2 from State (id=443)
  21->22: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:156.2-35 "int h0 = hash0(s ... capacity"
--> State (id=446)

Step 64: Executed by p2 from State (id=446)
  22->174: $sef$19=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:157.11-21 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$19:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=468)

Step 65: Executed by p2 from State (id=468)
  23->24: h1=1%(*(s)).0 [h1:=0] at StripedCuckooHashSet.cvl:157.2-35 "int h1 = hash1(s ... capacity"
  24->25: i=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  25->26: h=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  26->27: mustResize=false at stdbool.h:4.13-6.14 "_Bool mustResize = 0" expanded from StripedCuckooHashSet.cvl:159.2-5 "bool"
--> State (id=477)

Step 66: Executed by p2 from State (id=477)
  27->190: $sef$20=present(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:161.6-18 "present(s, x)"
--> State (id=480)

Step 67: Executed by p2 from State (id=480)
  190->172: $sef$14=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:135.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$14:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=502)

Step 68: Executed by p2 from State (id=502)
  191->192: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:135.2-35 "int h0 = hash0(s ... capacity"
--> State (id=505)

Step 69: Executed by p2 from State (id=505)
  192->154: $sef$15=ArrayList_contains(* (&<d0>heap.malloc1[0][0]+h0), 0) at StripedCuckooHashSet.cvl:136.6-43 "ArrayList_contains(s->table[0][ ... )"
--> State (id=508)

Step 70: Executed by p2 from State (id=508)
  154->155: n=$seq_length(&<d0>heap.malloc5[0][0].data) [n:=0] at ArrayList.cvl:51.2-30 "int n = $seq_length(& ... )"
  155->156: i=0 at ArrayList.cvl:52.7-15 "int i = 0"
--> State (id=514)

Step 71: Executed by p2 from State (id=514)
  156->160: LOOP_BODY_EXIT (guard: ! (0<n)) [$assume(true)] at ArrayList.cvl:52.18-22 "i < n"
  160->RET: ArrayList_contains(...) return false [$sef$15:=false] at ArrayList.cvl:57.2-14 "return 0;"
  193->196: FALSE_BRANCH_IF (guard: !false) at StripedCuckooHashSet.cvl:143.2 "}"
--> State (id=520)

Step 72: Executed by p2 from State (id=520)
  196->174: $sef$16=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:139.13-23 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$16:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=542)

Step 73: Executed by p2 from State (id=542)
  197->198: h1=1%(*(s)).0 [h1:=0] at StripedCuckooHashSet.cvl:139.4-37 "int h1 = hash1(s ... capacity"
--> State (id=545)

Step 74: Executed by p2 from State (id=545)
  198->154: $sef$17=ArrayList_contains(* (&<d0>heap.malloc1[1][0]+h1), 0) at StripedCuckooHashSet.cvl:140.8-45 "ArrayList_contains(s->table[1][ ... )"
--> State (id=548)

Step 75: Executed by p2 from State (id=548)
  154->155: n=$seq_length(&<d0>heap.malloc5[1][0].data) [n:=0] at ArrayList.cvl:51.2-30 "int n = $seq_length(& ... )"
  155->156: i=0 at ArrayList.cvl:52.7-15 "int i = 0"
--> State (id=554)

Step 76: Executed by p2 from State (id=554)
  156->160: LOOP_BODY_EXIT (guard: ! (0<n)) [$assume(true)] at ArrayList.cvl:52.18-22 "i < n"
  160->RET: ArrayList_contains(...) return false [$sef$17:=false] at ArrayList.cvl:57.2-14 "return 0;"
  199->195: FALSE_BRANCH_IF (guard: !false) at StripedCuckooHashSet.cvl:142.4 "}"
--> State (id=560)

Step 77: Executed by p2 from State (id=560)
  195->RET: present(...) return false [$sef$20:=false] at StripedCuckooHashSet.cvl:144.2-14 "return 0;"
  28->30: FALSE_BRANCH_IF (guard: !false) at StripedCuckooHashSet.cvl:163.2 "}"
--> State (id=565)

Step 78: Executed by p2 from State (id=565)
  30->172: $sef$21=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:164.31-41 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$21:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=587)

Step 79: Executed by p2 from State (id=587)
  31->32: set0=* (&<d0>heap.malloc1[0][0]+($sef$21%(*(s)).0)) [set0:=&<d0>heap.malloc5[0][0]] at StripedCuckooHashSet.cvl:164.2-56 "ArrayList set0 = s->table ... ]"
--> State (id=590)

Step 80: Executed by p2 from State (id=590)
  32->174: $sef$22=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:165.31-41 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$22:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=612)

Step 81: Executed by p2 from State (id=612)
  33->34: set1=* (&<d0>heap.malloc1[1][0]+($sef$22%(*(s)).0)) [set1:=&<d0>heap.malloc5[1][0]] at StripedCuckooHashSet.cvl:165.2-56 "ArrayList set1 = s->table ... ]"
--> State (id=615)

Step 82: Executed by p2 from State (id=615)
  34->162: $sef$23=ArrayList_size(&<d0>heap.malloc5[0][0]) at StripedCuckooHashSet.cvl:166.6-25 "ArrayList_size(set0)"
--> State (id=618)

Step 83: Executed by p2 from State (id=618)
  162->163: $sef$40=$seq_length(&<d0>heap.malloc5[0][0].data) [$sef$40:=0] at ArrayList.cvl:65.9-29 "$seq_length(&a->data)"
  163->RET: ArrayList_size(...) return 0 [$sef$23:=0] at ArrayList.cvl:65.2-30 "return $seq_length(&a->data);"
  35->36: TRUE_BRANCH_IF (guard: 0<(2/2)) at StripedCuckooHashSet.cvl:166.40 "{"
--> State (id=626)

Step 84: Executed by p2 from State (id=626)
  36->144: ArrayList_add(&<d0>heap.malloc5[0][0], 0) at StripedCuckooHashSet.cvl:167.4-25 "ArrayList_add(set0, x)"
--> State (id=629)

Step 85: Executed by p2 from State (id=629)
  144->308: $seq_append(&<d0>heap.malloc5[0][0].data, &<d79>item, 1) at ArrayList.cvl:29.2-32 "$seq_append(&a->data, & ... )"
  308->309: length=$seq_length(&<d0>heap.malloc5[0][0].data) [length:=0] at seq.cvl:4.2-32 "int length = $seq_length(array)"
  309->310: $seq_insert(&<d0>heap.malloc5[0][0].data, 0, &<d79>item, 1) at seq.cvl:6.2-42 "$seq_insert(array, length, values ... )"
  310->RET: $seq_append(...) return at seq.cvl:7.0 "}"
  145->RET: ArrayList_add(...) return at ArrayList.cvl:30.0 "}"
--> State (id=652)

Step 86: Executed by p2 from State (id=652)
  37->183: release(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:168.4-16 "release(s, x)"
--> State (id=655)

Step 87: Executed by p2 from State (id=655)
  183->172: $sef$4=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:89.26-36 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$4:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=677)

Step 88: Executed by p2 from State (id=677)
  184->185: lock0=* (&<d0>heap.malloc2[0][0]+($sef$4%1)) [lock0:=&<d0>heap.malloc6[0][0]] at StripedCuckooHashSet.cvl:89.2-56 "Lock lock0 = s->lock ... ]"
--> State (id=680)

Step 89: Executed by p2 from State (id=680)
  185->174: $sef$5=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:90.26-36 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$5:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=702)

Step 90: Executed by p2 from State (id=702)
  186->187: lock1=* (&<d0>heap.malloc2[1][0]+($sef$5%1)) [lock1:=&<d0>heap.malloc6[1][0]] at StripedCuckooHashSet.cvl:90.2-56 "Lock lock1 = s->lock ... ]"
--> State (id=705)

Step 91: Executed by p2 from State (id=705)
  187->134: Lock_release(&<d0>heap.malloc6[0][0]) at StripedCuckooHashSet.cvl:91.2-20 "Lock_release(lock0)"
  134->135: $assert(p2==(*(l)).0) at ReentrantLock.cvl:57.2-27 "$assert($self == l->owner)"
  135->136: (*(&<d0>heap.malloc6[0][0])).count=1-1 [(*(&<d0>heap.malloc6[0][0])).count:=0] at ReentrantLock.cvl:58.2-9 "l->count"
  136->137: TRUE_BRANCH_IF (guard: 0==0) at ReentrantLock.cvl:59.21 "l"
  137->138: (*(&<d0>heap.malloc6[0][0])).owner=$proc_null at ReentrantLock.cvl:59.21-41 "l->owner = $proc_null"
--> State (id=722)

Step 92: Executed by p2 from State (id=722)
  138->RET: Lock_release(...) return at ReentrantLock.cvl:60.0 "}"
--> State (id=728)

Step 93: Executed by p2 from State (id=728)
  188->134: Lock_release(&<d0>heap.malloc6[1][0]) at StripedCuckooHashSet.cvl:92.2-20 "Lock_release(lock1)"
  134->135: $assert(p2==(*(l)).0) at ReentrantLock.cvl:57.2-27 "$assert($self == l->owner)"
  135->136: (*(&<d0>heap.malloc6[1][0])).count=1-1 [(*(&<d0>heap.malloc6[1][0])).count:=0] at ReentrantLock.cvl:58.2-9 "l->count"
  136->137: TRUE_BRANCH_IF (guard: 0==0) at ReentrantLock.cvl:59.21 "l"
  137->138: (*(&<d0>heap.malloc6[1][0])).owner=$proc_null at ReentrantLock.cvl:59.21-41 "l->owner = $proc_null"
--> State (id=745)

Step 94: Executed by p2 from State (id=745)
  138->RET: Lock_release(...) return at ReentrantLock.cvl:60.0 "}"
  189->RET: release(...) return at StripedCuckooHashSet.cvl:93.0 "}"
  38->39: Set_add(...) return true at StripedCuckooHashSet.cvl:169.4-15 "return 1;"
--> State (id=755)

Step 95: Executed by p2 from State (id=755)
  319->RET: _par_proc0(...) return at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=757)

Step 96: Executed by p1 from State (id=757)
  177->178: lock0=* (&<d0>heap.malloc2[0][0]+($sef$2%1)) [lock0:=&<d0>heap.malloc6[0][0]] at StripedCuckooHashSet.cvl:82.2-56 "Lock lock0 = s->lock ... ]"
--> State (id=760)

Step 97: Executed by p1 from State (id=760)
  178->174: $sef$3=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:83.26-36 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$3:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=782)

Step 98: Executed by p1 from State (id=782)
  179->180: lock1=* (&<d0>heap.malloc2[1][0]+($sef$3%1)) [lock1:=&<d0>heap.malloc6[1][0]] at StripedCuckooHashSet.cvl:83.2-56 "Lock lock1 = s->lock ... ]"
--> State (id=785)

Step 99: Executed by p1 from State (id=785)
  180->129: Lock_acquire(&<d0>heap.malloc6[0][0]) at StripedCuckooHashSet.cvl:84.2-20 "Lock_acquire(lock0)"
--> State (id=788)

Step 100: Executed by p1 from State (id=788)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p1==(*(l)).0 [$sef$41:=false] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->131: TRUE_BRANCH_IF (guard: !false) at ReentrantLock.cvl:45.20 "{"
--> State (id=811)

Step 101: Executed by p1 from State (id=811)
  131->311: Lock_acquire_aux(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:46.4-22 "Lock_acquire_aux(l)"
  311->312: (*(&<d0>heap.malloc6[0][0])).owner=$self [(*(&<d0>heap.malloc6[0][0])).owner:=p1] at ReentrantLock.cvl:31.32-47 "l->owner = $self"
  312->RET: Lock_acquire_aux(...) return at ReentrantLock.cvl:32.0 "}"
--> State (id=836)

Step 102: Executed by p1 from State (id=836)
  132->313: lock_increment(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[0][0])).count=0+1 [(*(&<d0>heap.malloc6[0][0])).count:=1] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
--> State (id=861)

Step 103: Executed by p1 from State (id=861)
  181->129: Lock_acquire(&<d0>heap.malloc6[1][0]) at StripedCuckooHashSet.cvl:85.2-20 "Lock_acquire(lock1)"
--> State (id=864)

Step 104: Executed by p1 from State (id=864)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p1==(*(l)).0 [$sef$41:=false] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->131: TRUE_BRANCH_IF (guard: !false) at ReentrantLock.cvl:45.20 "{"
--> State (id=887)

Step 105: Executed by p1 from State (id=887)
  131->311: Lock_acquire_aux(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:46.4-22 "Lock_acquire_aux(l)"
  311->312: (*(&<d0>heap.malloc6[1][0])).owner=$self [(*(&<d0>heap.malloc6[1][0])).owner:=p1] at ReentrantLock.cvl:31.32-47 "l->owner = $self"
  312->RET: Lock_acquire_aux(...) return at ReentrantLock.cvl:32.0 "}"
--> State (id=912)

Step 106: Executed by p1 from State (id=912)
  132->313: lock_increment(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[1][0])).count=0+1 [(*(&<d0>heap.malloc6[1][0])).count:=1] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
  182->RET: acquire(...) return at StripedCuckooHashSet.cvl:86.0 "}"
--> State (id=939)

Step 107: Executed by p1 from State (id=939)
  20->172: $sef$18=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:156.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$18:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=961)

Step 108: Executed by p1 from State (id=961)
  21->22: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:156.2-35 "int h0 = hash0(s ... capacity"
--> State (id=964)

Step 109: Executed by p1 from State (id=964)
  22->174: $sef$19=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:157.11-21 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$19:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=986)

Step 110: Executed by p1 from State (id=986)
  23->24: h1=1%(*(s)).0 [h1:=0] at StripedCuckooHashSet.cvl:157.2-35 "int h1 = hash1(s ... capacity"
  24->25: i=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  25->26: h=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  26->27: mustResize=false at stdbool.h:4.13-6.14 "_Bool mustResize = 0" expanded from StripedCuckooHashSet.cvl:159.2-5 "bool"
--> State (id=995)

Step 111: Executed by p1 from State (id=995)
  27->190: $sef$20=present(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:161.6-18 "present(s, x)"
--> State (id=998)

Step 112: Executed by p1 from State (id=998)
  190->172: $sef$14=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:135.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$14:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=1020)

Step 113: Executed by p1 from State (id=1020)
  191->192: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:135.2-35 "int h0 = hash0(s ... capacity"
--> State (id=1023)

Step 114: Executed by p1 from State (id=1023)
  192->154: $sef$15=ArrayList_contains(* (&<d0>heap.malloc1[0][0]+h0), 0) at StripedCuckooHashSet.cvl:136.6-43 "ArrayList_contains(s->table[0][ ... )"
--> State (id=1026)

Step 115: Executed by p1 from State (id=1026)
  154->155: n=$seq_length(&<d0>heap.malloc5[0][0].data) [n:=1] at ArrayList.cvl:51.2-30 "int n = $seq_length(& ... )"
  155->156: i=0 at ArrayList.cvl:52.7-15 "int i = 0"
--> State (id=1032)

Step 116: Executed by p1 from State (id=1032)
  156->157: LOOP_BODY_ENTER (guard: 0<n) [$assume(true)] at ArrayList.cvl:52.18-22 "i < n"
--> State (id=1034)

Step 117: Executed by p1 from State (id=1034)
  157->158: TRUE_BRANCH_IF (guard: 0==item) [$assume(true)] at ArrayList.cvl:53.28 "{"
  158->159: ArrayList_contains(...) return true [$sef$15:=true] at ArrayList.cvl:54.6-17 "return 1;"
  193->194: TRUE_BRANCH_IF (guard: true) at StripedCuckooHashSet.cvl:136.46 "{"
  194->195: present(...) return true [$sef$20:=true] at StripedCuckooHashSet.cvl:137.4-15 "return 1;"
  28->29: TRUE_BRANCH_IF (guard: true) at StripedCuckooHashSet.cvl:161.21 "{"
  29->30: Set_add(...) return false at StripedCuckooHashSet.cvl:162.4-16 "return 0;"
--> State (id=1046)

Step 118: Executed by p1 from State (id=1046)
  318->18: Set_add(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:327.6-18 "Set_add(s, 0)"
  18->19: y=-1 at StripedCuckooHashSet.cvl:154.2-9 "T y = -1"
--> State (id=1051)

Step 119: Executed by p1 from State (id=1051)
  19->176: acquire(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:155.2-14 "acquire(s, x)"
--> State (id=1054)

Step 120: Executed by p1 from State (id=1054)
  176->172: $sef$2=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:82.26-36 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$2:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=1076)

Step 121: Executed by p1 from State (id=1076)
  177->178: lock0=* (&<d0>heap.malloc2[0][0]+($sef$2%1)) [lock0:=&<d0>heap.malloc6[0][0]] at StripedCuckooHashSet.cvl:82.2-56 "Lock lock0 = s->lock ... ]"
--> State (id=1079)

Step 122: Executed by p1 from State (id=1079)
  178->174: $sef$3=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:83.26-36 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$3:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=1101)

Step 123: Executed by p1 from State (id=1101)
  179->180: lock1=* (&<d0>heap.malloc2[1][0]+($sef$3%1)) [lock1:=&<d0>heap.malloc6[1][0]] at StripedCuckooHashSet.cvl:83.2-56 "Lock lock1 = s->lock ... ]"
--> State (id=1104)

Step 124: Executed by p1 from State (id=1104)
  180->129: Lock_acquire(&<d0>heap.malloc6[0][0]) at StripedCuckooHashSet.cvl:84.2-20 "Lock_acquire(lock0)"
--> State (id=1107)

Step 125: Executed by p1 from State (id=1107)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p1==(*(l)).0 [$sef$41:=true] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->132: FALSE_BRANCH_IF (guard: !!true) at ReentrantLock.cvl:47.2 "}"
--> State (id=1130)

Step 126: Executed by p1 from State (id=1130)
  132->313: lock_increment(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[0][0])).count=1+1 [(*(&<d0>heap.malloc6[0][0])).count:=2] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
--> State (id=1155)

Step 127: Executed by p1 from State (id=1155)
  181->129: Lock_acquire(&<d0>heap.malloc6[1][0]) at StripedCuckooHashSet.cvl:85.2-20 "Lock_acquire(lock1)"
--> State (id=1158)

Step 128: Executed by p1 from State (id=1158)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p1==(*(l)).0 [$sef$41:=true] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->132: FALSE_BRANCH_IF (guard: !!true) at ReentrantLock.cvl:47.2 "}"
--> State (id=1181)

Step 129: Executed by p1 from State (id=1181)
  132->313: lock_increment(&<d0>heap.malloc6[1][0]) at ReentrantLock.cvl:48.2-18 "lock_increment(l)"
  313->314: (*(&<d0>heap.malloc6[1][0])).count=1+1 [(*(&<d0>heap.malloc6[1][0])).count:=2] at ReentrantLock.cvl:36.2-9 "l->count"
  314->RET: lock_increment(...) return at ReentrantLock.cvl:37.0 "}"
  133->RET: Lock_acquire(...) return at ReentrantLock.cvl:49.0 "}"
  182->RET: acquire(...) return at StripedCuckooHashSet.cvl:86.0 "}"
--> State (id=1208)

#Josh: ALERT p1 NEVER RELEASES THIS LOCK!!! NEED TO FIGURE THIS OUT

Step 130: Executed by p1 from State (id=1208)
  20->172: $sef$18=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:156.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$18:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=1230)

Step 131: Executed by p1 from State (id=1230)
  21->22: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:156.2-35 "int h0 = hash0(s ... capacity"
--> State (id=1233)

Step 132: Executed by p1 from State (id=1233)
  22->174: $sef$19=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:157.11-21 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$19:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=1255)

Step 133: Executed by p1 from State (id=1255)
  23->24: h1=1%(*(s)).0 [h1:=0] at StripedCuckooHashSet.cvl:157.2-35 "int h1 = hash1(s ... capacity"
  24->25: i=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  25->26: h=-1 at StripedCuckooHashSet.cvl:158.2-19 "int i = -1, ... 1"
  26->27: mustResize=false at stdbool.h:4.13-6.14 "_Bool mustResize = 0" expanded from StripedCuckooHashSet.cvl:159.2-5 "bool"
--> State (id=1264)

Step 134: Executed by p1 from State (id=1264)
  27->190: $sef$20=present(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:161.6-18 "present(s, x)"
--> State (id=1267)

Step 135: Executed by p1 from State (id=1267)
  190->172: $sef$14=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:135.11-21 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$14:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=1289)

Step 136: Executed by p1 from State (id=1289)
  191->192: h0=0%(*(s)).0 [h0:=0] at StripedCuckooHashSet.cvl:135.2-35 "int h0 = hash0(s ... capacity"
--> State (id=1292)

Step 137: Executed by p1 from State (id=1292)
  192->154: $sef$15=ArrayList_contains(* (&<d0>heap.malloc1[0][0]+h0), 0) at StripedCuckooHashSet.cvl:136.6-43 "ArrayList_contains(s->table[0][ ... )"
--> State (id=1295)

Step 138: Executed by p1 from State (id=1295)
  154->155: n=$seq_length(&<d0>heap.malloc5[0][0].data) [n:=1] at ArrayList.cvl:51.2-30 "int n = $seq_length(& ... )"
  155->156: i=0 at ArrayList.cvl:52.7-15 "int i = 0"
--> State (id=1301)

Step 139: Executed by p1 from State (id=1301)
  156->157: LOOP_BODY_ENTER (guard: 0<n) [$assume(true)] at ArrayList.cvl:52.18-22 "i < n"
--> State (id=1303)

Step 140: Executed by p1 from State (id=1303)
  157->158: TRUE_BRANCH_IF (guard: 0==item) [$assume(true)] at ArrayList.cvl:53.28 "{"
  158->159: ArrayList_contains(...) return true [$sef$15:=true] at ArrayList.cvl:54.6-17 "return 1;"
  193->194: TRUE_BRANCH_IF (guard: true) at StripedCuckooHashSet.cvl:136.46 "{"
  194->195: present(...) return true [$sef$20:=true] at StripedCuckooHashSet.cvl:137.4-15 "return 1;"
  28->29: TRUE_BRANCH_IF (guard: true) at StripedCuckooHashSet.cvl:161.21 "{"
  29->30: Set_add(...) return false at StripedCuckooHashSet.cvl:162.4-16 "return 0;"
--> State (id=1315)

Step 141: Executed by p1 from State (id=1315)
  319->RET: _par_proc0(...) return at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=1317)

Step 142: Executed by p0 from State (id=1317)
  9->10: $wait(p1) at StripedCuckooHashSet.cvl:331.2 "}"
  10->8: _civl_ir1=0+1 [_civl_ir1:=1] at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=1322)

Step 143: Executed by p0 from State (id=1322)
  8->9: LOOP_BODY_ENTER (guard: 1<_dom_size0) [$assume(true)] at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=1324)

Step 144: Executed by p0 from State (id=1324)
  9->10: $wait(p2) at StripedCuckooHashSet.cvl:331.2 "}"
  10->8: _civl_ir1=1+1 [_civl_ir1:=2] at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=1329)

Step 145: Executed by p0 from State (id=1329)
  8->11: LOOP_BODY_EXIT (guard: ! (2<_dom_size0)) [$assume(true)] at StripedCuckooHashSet.cvl:331.2 "}"
--> State (id=1331)

Step 146: Executed by p0 from State (id=1331)
  11->112: Set_print(&<d0>heap.malloc0[0][0]) at StripedCuckooHashSet.cvl:333.2-13 "Set_print(s)"
  112->113: i=0 at StripedCuckooHashSet.cvl:310.7-15 "int i = 0"
--> State (id=1336)

Step 147: Executed by p0 from State (id=1336)
  113->114: LOOP_BODY_ENTER (guard: 0<2) [$assume(true)] at StripedCuckooHashSet.cvl:310.18-22 "i < 2"
  114->115: j=0 at StripedCuckooHashSet.cvl:311.9-17 "int j = 0"
--> State (id=1340)

Step 148: Executed by p0 from State (id=1340)
  115->116: LOOP_BODY_ENTER (guard: 0<(*(s)).0) [$assume(true)] at StripedCuckooHashSet.cvl:311.20-34 "j < s->capacity"
--> State (id=1342)

Step 149: Executed by p0 from State (id=1342)
  116->164: ArrayList_print(* (&<d0>heap.malloc1[0][0]+j)) at StripedCuckooHashSet.cvl:312.6-36 "ArrayList_print(s->table[i][ ... )"
--> State (id=1345)

Step 150: Executed by p0 from State (id=1345)
  164->162: n=ArrayList_size(&<d0>heap.malloc5[0][0]) at ArrayList.cvl:69.2-26 "int n = ArrayList_size(a)"
--> State (id=1348)

Step 151: Executed by p0 from State (id=1348)
  162->163: $sef$40=$seq_length(&<d0>heap.malloc5[0][0].data) [$sef$40:=1] at ArrayList.cvl:65.9-29 "$seq_length(&a->data)"
  163->RET: ArrayList_size(...) return 1 [n:=1] at ArrayList.cvl:65.2-30 "return $seq_length(&a->data);"
--> State (id=1354)

Step 152: { Executed by p0 from State (id=1354)
  165->166: printf("{  ") at ArrayList.cvl:70.2-13 "printf("{ ")"
  166->167: i=0 at ArrayList.cvl:71.7-15 "int i = 0"
--> State (id=1358)

Step 153: Executed by p0 from State (id=1358)
  167->168: LOOP_BODY_ENTER (guard: 0<n) [$assume(true)] at ArrayList.cvl:71.18-22 "i < n"
--> State (id=1360)

Step 154: 0 Executed by p0 from State (id=1360)
  168->169: printf("%d  ", 0) at ArrayList.cvl:72.4-28 "printf("%d ", a->data[ ... )"
  169->167: i=0+1 [i:=1] at ArrayList.cvl:71.25 "i"
--> State (id=1364)

Step 155: Executed by p0 from State (id=1364)
  167->170: LOOP_BODY_EXIT (guard: ! (1<n)) [$assume(true)] at ArrayList.cvl:71.18-22 "i < n"
--> State (id=1366)

Step 156: }Executed by p0 from State (id=1366)
  170->171: printf("} ") at ArrayList.cvl:73.2-12 "printf("}")"
  171->RET: ArrayList_print(...) return at ArrayList.cvl:74.0 "}"
--> State (id=1370)

Step 157: 
Executed by p0 from State (id=1370)
  117->118: printf("\n ") at StripedCuckooHashSet.cvl:313.6-17 "printf("\n")"
  118->115: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:311.37 "j"
--> State (id=1374)

Step 158: Executed by p0 from State (id=1374)
  115->119: LOOP_BODY_EXIT (guard: ! (1<(*(s)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:311.20-34 "j < s->capacity"
--> State (id=1376)

Step 159: 
Executed by p0 from State (id=1376)
  119->120: printf("\n ") at StripedCuckooHashSet.cvl:315.4-15 "printf("\n")"
  120->113: i=0+1 [i:=1] at StripedCuckooHashSet.cvl:310.25 "i"
--> State (id=1380)

Step 160: Executed by p0 from State (id=1380)
  113->114: LOOP_BODY_ENTER (guard: 1<2) [$assume(true)] at StripedCuckooHashSet.cvl:310.18-22 "i < 2"
  114->115: j=0 at StripedCuckooHashSet.cvl:311.9-17 "int j = 0"
--> State (id=1384)

Step 161: Executed by p0 from State (id=1384)
  115->116: LOOP_BODY_ENTER (guard: 0<(*(s)).0) [$assume(true)] at StripedCuckooHashSet.cvl:311.20-34 "j < s->capacity"
--> State (id=1386)

Step 162: Executed by p0 from State (id=1386)
  116->164: ArrayList_print(* (&<d0>heap.malloc1[1][0]+j)) at StripedCuckooHashSet.cvl:312.6-36 "ArrayList_print(s->table[i][ ... )"
--> State (id=1389)

Step 163: Executed by p0 from State (id=1389)
  164->162: n=ArrayList_size(&<d0>heap.malloc5[1][0]) at ArrayList.cvl:69.2-26 "int n = ArrayList_size(a)"
--> State (id=1392)

Step 164: Executed by p0 from State (id=1392)
  162->163: $sef$40=$seq_length(&<d0>heap.malloc5[1][0].data) [$sef$40:=0] at ArrayList.cvl:65.9-29 "$seq_length(&a->data)"
  163->RET: ArrayList_size(...) return 0 [n:=0] at ArrayList.cvl:65.2-30 "return $seq_length(&a->data);"
--> State (id=1398)

Step 165: { Executed by p0 from State (id=1398)
  165->166: printf("{  ") at ArrayList.cvl:70.2-13 "printf("{ ")"
  166->167: i=0 at ArrayList.cvl:71.7-15 "int i = 0"
--> State (id=1402)

Step 166: Executed by p0 from State (id=1402)
  167->170: LOOP_BODY_EXIT (guard: ! (0<n)) [$assume(true)] at ArrayList.cvl:71.18-22 "i < n"
--> State (id=1404)

Step 167: }Executed by p0 from State (id=1404)
  170->171: printf("} ") at ArrayList.cvl:73.2-12 "printf("}")"
  171->RET: ArrayList_print(...) return at ArrayList.cvl:74.0 "}"
--> State (id=1408)

Step 168: 
Executed by p0 from State (id=1408)
  117->118: printf("\n ") at StripedCuckooHashSet.cvl:313.6-17 "printf("\n")"
  118->115: j=0+1 [j:=1] at StripedCuckooHashSet.cvl:311.37 "j"
--> State (id=1412)

Step 169: Executed by p0 from State (id=1412)
  115->119: LOOP_BODY_EXIT (guard: ! (1<(*(s)).0)) [$assume(true)] at StripedCuckooHashSet.cvl:311.20-34 "j < s->capacity"
--> State (id=1414)

Step 170: 
Executed by p0 from State (id=1414)
  119->120: printf("\n ") at StripedCuckooHashSet.cvl:315.4-15 "printf("\n")"
  120->113: i=1+1 [i:=2] at StripedCuckooHashSet.cvl:310.25 "i"
--> State (id=1418)

Step 171: Executed by p0 from State (id=1418)
  113->121: LOOP_BODY_EXIT (guard: ! (2<2)) [$assume(true)] at StripedCuckooHashSet.cvl:310.18-22 "i < 2"
  121->RET: Set_print(...) return at StripedCuckooHashSet.cvl:316.2 "}"
--> State (id=1422)

Step 172: Executed by p0 from State (id=1422)
  12->63: $sef$38=Set_contains(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:335.10-27 "Set_contains(s, 0)"
--> State (id=1425)

Step 173: Executed by p0 from State (id=1425)
  63->176: acquire(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:96.2-14 "acquire(s, x)"
--> State (id=1428)

Step 174: Executed by p0 from State (id=1428)
  176->172: $sef$2=hash0(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:82.26-36 "hash0(s, x)"
  172->122: $sef$0=hash_code_dual(0, 0) at StripedCuckooHashSet.cvl:73.9-28 "hash_code_dual(x, 0)"
  122->RET: hash_code_dual(...) return  (0!=0) (0+1)0 [$sef$0:=0] at hash.cvl:64.2-26 "return which ? x + ... ;"
  173->RET: hash0(...) return 0 [$sef$2:=0] at StripedCuckooHashSet.cvl:73.2-29 "return hash_code_dual(x, 0);"
--> State (id=1450)

Step 175: Executed by p0 from State (id=1450)
  177->178: lock0=* (&<d0>heap.malloc2[0][0]+($sef$2%1)) [lock0:=&<d0>heap.malloc6[0][0]] at StripedCuckooHashSet.cvl:82.2-56 "Lock lock0 = s->lock ... ]"
--> State (id=1453)

Step 176: Executed by p0 from State (id=1453)
  178->174: $sef$3=hash1(&<d0>heap.malloc0[0][0], 0) at StripedCuckooHashSet.cvl:83.26-36 "hash1(s, x)"
  174->122: $sef$1=hash_code_dual(0, 1) at StripedCuckooHashSet.cvl:78.9-28 "hash_code_dual(x, 1)"
  122->RET: hash_code_dual(...) return  (1!=0) (0+1)0 [$sef$1:=1] at hash.cvl:64.2-26 "return which ? x + ... ;"
  175->RET: hash1(...) return 1 [$sef$3:=1] at StripedCuckooHashSet.cvl:78.2-29 "return hash_code_dual(x, 1);"
--> State (id=1475)

Step 177: Executed by p0 from State (id=1475)
  179->180: lock1=* (&<d0>heap.malloc2[1][0]+($sef$3%1)) [lock1:=&<d0>heap.malloc6[1][0]] at StripedCuckooHashSet.cvl:83.2-56 "Lock lock1 = s->lock ... ]"
--> State (id=1478)

Step 178: Executed by p0 from State (id=1478)
  180->129: Lock_acquire(&<d0>heap.malloc6[0][0]) at StripedCuckooHashSet.cvl:84.2-20 "Lock_acquire(lock0)"
--> State (id=1481)

Step 179: Executed by p0 from State (id=1481)
  129->315: $sef$41=am_owner(&<d0>heap.malloc6[0][0]) at ReentrantLock.cvl:45.7-17 "am_owner(l)"
  315->RET: am_owner(...) return p0==(*(l)).0 [$sef$41:=false] at ReentrantLock.cvl:41.2-26 "return $self == l->owner;"
  130->131: TRUE_BRANCH_IF (guard: !false) at ReentrantLock.cvl:45.20 "{"
--> State (id=1504)

Step 180: 
State (id=1504)
| Path condition
| | forall _t : dynamicType . (0 <= CIVL_SIZEOF(_t) - 1)
| Dynamic scopes
| | dyscope d0 (parent=NULL, static=1)
| | | variables
| | | | _heap = 
| | | | | objects of malloc 0 at StripedCuckooHashSet.cvl:39.2-40 "Set result = malloc(sizeof ... )"
| | | | | | 0: struct Set[1]
| | | | | | | [0]: struct Set
| | | | | | | | .capacity=1
| | | | | | | | .lock={[0]=&<d0>heap.malloc2[0][0], [1]=&<d0>heap.malloc2[1][0]}
| | | | | | | | .table={[0]=&<d0>heap.malloc1[0][0], [1]=&<d0>heap.malloc1[1][0]}
| | | | | objects of malloc 1 at StripedCuckooHashSet.cvl:42.4-64 "result->table[i] =  ... )"
| | | | | | 0: (struct ArrayList)*[1]{[0]=&<d0>heap.malloc5[0][0]}
| | | | | | 1: (struct ArrayList)*[1]{[0]=&<d0>heap.malloc5[1][0]}
| | | | | objects of malloc 2 at StripedCuckooHashSet.cvl:49.4-58 "result->lock[i] =  ... )"
| | | | | | 0: (struct Lock)*[1]{[0]=&<d0>heap.malloc6[0][0]}
| | | | | | 1: (struct Lock)*[1]{[0]=&<d0>heap.malloc6[1][0]}
| | | | | objects of malloc 5 at ArrayList.cvl:19.2-71 "ArrayList result = (ArrayList) ... )"
| | | | | | 0: struct ArrayList[1]
| | | | | | | [0]: struct ArrayList
| | | | | | | | .data={[0]=0}
| | | | | | 1: struct ArrayList[1]
| | | | | | | [0]: struct ArrayList
| | | | | | | | .data={}
| | | | | objects of malloc 6 at ReentrantLock.cvl:19.2-42 "Lock result = malloc(sizeof ... )"
| | | | | | 0: struct Lock[1]
| | | | | | | [0]={.owner=UNDEFINED, .count=2}
| | | | | | 1: struct Lock[1]
| | | | | | | [0]={.owner=UNDEFINED, .count=2}
| | | | _civl_root = (scope_t(0))
| | | | root = (scope_t(0))
| | | | VAL_B = 4
| | | | HASH_B = 3
| | dyscope d1 (parent=d0, static=72)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | $sef$38 = NULL
| | dyscope d2 (parent=d0, static=31)
| | | variables
| | dyscope d3 (parent=d2, static=79)
| | | variables
| | | | result = &<d0>heap.malloc0[0][0]
| | dyscope d4 (parent=d3, static=80)
| | | variables
| | | | i = 2
| | dyscope d5 (parent=d4, static=81)
| | | variables
| | | | j = 1
| | dyscope d6 (parent=d0, static=54)
| | | variables
| | dyscope d7 (parent=d6, static=128)
| | | variables
| | | | result = &<d0>heap.malloc5[0][0]
| | dyscope d8 (parent=d4, static=81)
| | | variables
| | | | j = 1
| | dyscope d9 (parent=d0, static=54)
| | | variables
| | dyscope d10 (parent=d9, static=128)
| | | variables
| | | | result = &<d0>heap.malloc5[1][0]
| | dyscope d11 (parent=d3, static=82)
| | | variables
| | | | i = 2
| | dyscope d12 (parent=d11, static=83)
| | | variables
| | | | j = 1
| | dyscope d13 (parent=d0, static=62)
| | | variables
| | dyscope d14 (parent=d13, static=136)
| | | variables
| | | | result = &<d0>heap.malloc6[0][0]
| | dyscope d15 (parent=d11, static=83)
| | | variables
| | | | j = 1
| | dyscope d16 (parent=d0, static=62)
| | | variables
| | dyscope d17 (parent=d16, static=136)
| | | variables
| | | | result = &<d0>heap.malloc6[1][0]
| | dyscope d18 (parent=d1, static=74)
| | | variables
| | | | _dom_size0 = 2
| | | | _par_procs0 = {[0]=UNDEFINED, [1]=UNDEFINED}
| | dyscope d19 (parent=d18, static=75)
| | | variables
| | | | val = 0
| | dyscope d20 (parent=d18, static=75)
| | | variables
| | | | val = 1
| | dyscope d21 (parent=d18, static=77)
| | | variables
| | | | _civl_ir1 = 2
| | dyscope d22 (parent=d21, static=78)
| | | variables
| | dyscope d23 (parent=d0, static=41)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d24 (parent=d23, static=95)
| | | variables
| | | | y = -1
| | | | $sef$18 = 0
| | | | h0 = 0
| | | | $sef$19 = 1
| | | | h1 = 0
| | | | i = -1
| | | | h = -1
| | | | mustResize = false
| | | | $sef$20 = true
| | | | $sef$21 = NULL
| | | | set0 = NULL
| | | | $sef$22 = NULL
| | | | set1 = NULL
| | | | $sef$23 = NULL
| | dyscope d25 (parent=d0, static=35)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d26 (parent=d25, static=89)
| | | variables
| | | | $sef$2 = 0
| | | | lock0 = &<d0>heap.malloc6[0][0]
| | | | $sef$3 = 1
| | | | lock1 = &<d0>heap.malloc6[1][0]
| | dyscope d27 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d28 (parent=d27, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d29 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d30 (parent=d0, static=41)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d31 (parent=d30, static=95)
| | | variables
| | | | y = -1
| | | | $sef$18 = 0
| | | | h0 = 0
| | | | $sef$19 = 1
| | | | h1 = 0
| | | | i = -1
| | | | h = -1
| | | | mustResize = false
| | | | $sef$20 = false
| | | | $sef$21 = 0
| | | | set0 = &<d0>heap.malloc5[0][0]
| | | | $sef$22 = 1
| | | | set1 = &<d0>heap.malloc5[1][0]
| | | | $sef$23 = 0
| | dyscope d32 (parent=d0, static=35)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d33 (parent=d32, static=89)
| | | variables
| | | | $sef$2 = 0
| | | | lock0 = &<d0>heap.malloc6[0][0]
| | | | $sef$3 = 1
| | | | lock1 = &<d0>heap.malloc6[1][0]
| | dyscope d34 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d35 (parent=d34, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d36 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d37 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d38 (parent=d37, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d39 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d40 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d41 (parent=d40, static=137)
| | | variables
| | | | $sef$41 = false
| | dyscope d42 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d43 (parent=d0, static=64)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d44 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d45 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d46 (parent=d45, static=137)
| | | variables
| | | | $sef$41 = false
| | dyscope d47 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d48 (parent=d0, static=64)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d49 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d50 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d51 (parent=d50, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d52 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d53 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d54 (parent=d53, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d55 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d56 (parent=d0, static=38)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d57 (parent=d56, static=93)
| | | variables
| | | | $sef$14 = 0
| | | | h0 = 0
| | | | $sef$15 = false
| | dyscope d58 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d59 (parent=d58, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d60 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d61 (parent=d0, static=58)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | | | item = 0
| | dyscope d62 (parent=d61, static=131)
| | | variables
| | | | n = 0
| | dyscope d63 (parent=d62, static=132)
| | | variables
| | | | i = 0
| | dyscope d64 (parent=d57, static=94)
| | | variables
| | | | $sef$16 = 1
| | | | h1 = 0
| | | | $sef$17 = false
| | dyscope d65 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d66 (parent=d65, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d67 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d68 (parent=d0, static=58)
| | | variables
| | | | a = &<d0>heap.malloc5[1][0]
| | | | item = 0
| | dyscope d69 (parent=d68, static=131)
| | | variables
| | | | n = 0
| | dyscope d70 (parent=d69, static=132)
| | | variables
| | | | i = 0
| | dyscope d71 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d72 (parent=d71, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d73 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d74 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d75 (parent=d74, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d76 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d77 (parent=d0, static=60)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | dyscope d78 (parent=d77, static=133)
| | | variables
| | | | $sef$40 = 0
| | dyscope d79 (parent=d0, static=56)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | | | item = 0
| | dyscope d80 (parent=d0, static=71)
| | | variables
| | | | array = &<d0>heap.malloc5[0][0].data
| | | | values = &<d79>item
| | | | count = 1
| | dyscope d81 (parent=d80, static=138)
| | | variables
| | | | length = 0
| | dyscope d82 (parent=d0, static=36)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d83 (parent=d82, static=90)
| | | variables
| | | | $sef$4 = 0
| | | | lock0 = &<d0>heap.malloc6[0][0]
| | | | $sef$5 = 1
| | | | lock1 = &<d0>heap.malloc6[1][0]
| | dyscope d84 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d85 (parent=d84, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d86 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d87 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d88 (parent=d87, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d89 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d90 (parent=d0, static=68)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d91 (parent=d0, static=68)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d92 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d93 (parent=d92, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d94 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d95 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d96 (parent=d95, static=137)
| | | variables
| | | | $sef$41 = false
| | dyscope d97 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d98 (parent=d0, static=64)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d99 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d100 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d101 (parent=d100, static=137)
| | | variables
| | | | $sef$41 = false
| | dyscope d102 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d103 (parent=d0, static=64)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d104 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d105 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d106 (parent=d105, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d107 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d108 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d109 (parent=d108, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d110 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d111 (parent=d0, static=38)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d112 (parent=d111, static=93)
| | | variables
| | | | $sef$14 = 0
| | | | h0 = 0
| | | | $sef$15 = true
| | dyscope d113 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d114 (parent=d113, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d115 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d116 (parent=d0, static=58)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | | | item = 0
| | dyscope d117 (parent=d116, static=131)
| | | variables
| | | | n = 1
| | dyscope d118 (parent=d117, static=132)
| | | variables
| | | | i = 0
| | dyscope d119 (parent=d0, static=41)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d120 (parent=d119, static=95)
| | | variables
| | | | y = -1
| | | | $sef$18 = 0
| | | | h0 = 0
| | | | $sef$19 = 1
| | | | h1 = 0
| | | | i = -1
| | | | h = -1
| | | | mustResize = false
| | | | $sef$20 = true
| | | | $sef$21 = NULL
| | | | set0 = NULL
| | | | $sef$22 = NULL
| | | | set1 = NULL
| | | | $sef$23 = NULL
| | dyscope d121 (parent=d0, static=35)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d122 (parent=d121, static=89)
| | | variables
| | | | $sef$2 = 0
| | | | lock0 = &<d0>heap.malloc6[0][0]
| | | | $sef$3 = 1
| | | | lock1 = &<d0>heap.malloc6[1][0]
| | dyscope d123 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d124 (parent=d123, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d125 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d126 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d127 (parent=d126, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d128 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d129 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d130 (parent=d129, static=137)
| | | variables
| | | | $sef$41 = true
| | dyscope d131 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d132 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d133 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d134 (parent=d133, static=137)
| | | variables
| | | | $sef$41 = true
| | dyscope d135 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d136 (parent=d0, static=65)
| | | variables
| | | | l = &<d0>heap.malloc6[1][0]
| | dyscope d137 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d138 (parent=d137, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d139 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d140 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d141 (parent=d140, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d142 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d143 (parent=d0, static=38)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d144 (parent=d143, static=93)
| | | variables
| | | | $sef$14 = 0
| | | | h0 = 0
| | | | $sef$15 = true
| | dyscope d145 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d146 (parent=d145, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d147 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d148 (parent=d0, static=58)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | | | item = 0
| | dyscope d149 (parent=d148, static=131)
| | | variables
| | | | n = 1
| | dyscope d150 (parent=d149, static=132)
| | | variables
| | | | i = 0
| | dyscope d151 (parent=d21, static=78)
| | | variables
| | dyscope d152 (parent=d0, static=44)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | dyscope d153 (parent=d152, static=126)
| | | variables
| | | | i = 2
| | dyscope d154 (parent=d153, static=127)
| | | variables
| | | | j = 1
| | dyscope d155 (parent=d0, static=61)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | dyscope d156 (parent=d155, static=134)
| | | variables
| | | | n = 1
| | dyscope d157 (parent=d0, static=60)
| | | variables
| | | | a = &<d0>heap.malloc5[0][0]
| | dyscope d158 (parent=d157, static=133)
| | | variables
| | | | $sef$40 = 1
| | dyscope d159 (parent=d156, static=135)
| | | variables
| | | | i = 1
| | dyscope d160 (parent=d153, static=127)
| | | variables
| | | | j = 1
| | dyscope d161 (parent=d0, static=61)
| | | variables
| | | | a = &<d0>heap.malloc5[1][0]
| | dyscope d162 (parent=d161, static=134)
| | | variables
| | | | n = 0
| | dyscope d163 (parent=d0, static=60)
| | | variables
| | | | a = &<d0>heap.malloc5[1][0]
| | dyscope d164 (parent=d163, static=133)
| | | variables
| | | | $sef$40 = 0
| | dyscope d165 (parent=d162, static=135)
| | | variables
| | | | i = 0
| | dyscope d166 (parent=d0, static=37)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d167 (parent=d166, static=91)
| | | variables
| | | | $sef$6 = NULL
| | | | h0 = NULL
| | | | $sef$7 = NULL
| | dyscope d168 (parent=d0, static=35)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d169 (parent=d168, static=89)
| | | variables
| | | | $sef$2 = 0
| | | | lock0 = &<d0>heap.malloc6[0][0]
| | | | $sef$3 = 1
| | | | lock1 = &<d0>heap.malloc6[1][0]
| | dyscope d170 (parent=d0, static=33)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d171 (parent=d170, static=87)
| | | variables
| | | | $sef$0 = 0
| | dyscope d172 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 0
| | dyscope d173 (parent=d0, static=34)
| | | variables
| | | | s = &<d0>heap.malloc0[0][0]
| | | | x = 0
| | dyscope d174 (parent=d173, static=88)
| | | variables
| | | | $sef$1 = 1
| | dyscope d175 (parent=d0, static=69)
| | | variables
| | | | x = 0
| | | | which = 1
| | dyscope d176 (parent=d0, static=67)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| | dyscope d177 (parent=d176, static=137)
| | | variables
| | | | $sef$41 = false
| | dyscope d178 (parent=d0, static=66)
| | | variables
| | | | l = &<d0>heap.malloc6[0][0]
| Process states
| | process 0
| | | call stack
| | | | Frame[function=Lock_acquire, location=131, ReentrantLock.cvl:46.4-19 "Lock_acquire_aux", dyscope=d177]
| | | | Frame[function=acquire, location=180, StripedCuckooHashSet.cvl:84.2-13 "Lock_acquire", dyscope=d169]
| | | | Frame[function=Set_contains, location=63, StripedCuckooHashSet.cvl:96.2-8 "acquire", dyscope=d167]
| | | | Frame[function=main, location=12, StripedCuckooHashSet.cvl:335.10-21 "Set_contains", dyscope=d1]
| | process - (id=1): null
| | process - (id=2): null

Violation of Deadlock found in (id=1504):
A deadlock is possible:
  Path condition: forall _t : dynamicType . (0 <= CIVL_SIZEOF(_t) - 1)
  Enabling predicate: false
process p0 (id=0): false

Trace ends after 180 trace steps.
Violation(s) found.

=== Source files ===
StripedCuckooHashSet.cvl  (StripedCuckooHashSet.cvl)
Set.h  (../../include/Set.h)
types.h  (../../include/types.h)
hash.cvh  (../../include/hash.cvh)
Lock.h  (../../include/Lock.h)
ArrayList.h  (../../include/ArrayList.h)
ArrayList.cvl  (../../src/util/ArrayList.cvl)
ReentrantLock.cvl  (../../src/util/ReentrantLock.cvl)
hash.cvl  (../../src/util/hash.cvl)

=== Command ===
civl replay -showTransitions -userIncludePath=../../include -inputVAL_B=4 -inputHASH_B=3 -D_STRIPED_CUCKOO_HASH_SET_MAIN StripedCuckooHashSet.cvl ../../src/util/ArrayList.cvl ../../src/util/ReentrantLock.cvl ../../src/util/hash.cvl 

=== Stats ===
   time (s)          : 2.01          valid calls  : 1118    
   memory (bytes)    : 2.57949696E8  provers      : cvc4, z3
   max process count : 3             prover calls : 0       
   states            : 181           
