/* Filename : SynchronousDualQueue.cvl
   Author   : Stephen F. Siegel
   Created  :
   Modified : 2024-12-15

 */
#pragma CIVL ACSL
#include "AtomicInteger.h"
#include "AtomicReference.cvh"
#include "Queue.h"
#include "tid.h"
#include "types.h"
#include <stdbool.h>
#include <stdlib.h>

void Queue_initialize(int nthread) {
}

void Queue_finalize() {
}

void Queue_terminate(int tid) {
}

bool Queue_stuck() {
  return false;
}


typedef enum NodeType {ITEM, RESERVATION} NodeType;

typedef struct Node {
  NodeType type;
  AtomicInteger item;
  AtomicReference next;
} * Node;

static Node Node_create(T myItem, NodeType myType) {
  Node this = malloc(sizeof(struct Node));
  this->item = AtomicInteger_create(myItem);
  this->next = AtomicReference_create(NULL);
  this->type = myType;
  return this;
}

// not in original code...
static void Node_destroy(Node this) {
  AtomicReference_destroy(this->next);
  AtomicInteger_destroy(this->item);
  free(this);
}

struct Queue {
  AtomicReference head;
  AtomicReference tail;
};

Queue Queue_create() {
  Queue this = malloc(sizeof(struct Queue));
  Node sentinel = Node_create(-1, ITEM); // new Node(null, ITEM)
  this->head = AtomicReference_create(sentinel);
  this->tail = AtomicReference_create(sentinel);
  return this;
}

// not in original code...
void Queue_destroy(Queue queue) {
  // if node is not null, its next is not null
  Node curr = AtomicReference_get(queue->head);
  Node prev = NULL;
  while (curr != NULL) {
    prev = curr;
    curr = AtomicReference_get(curr->next);
    Node_destroy(prev);
  }
  AtomicReference_destroy(queue->head);
  AtomicReference_destroy(queue->tail);
  free(queue);
}

void Queue_enq(Queue this, T e) {
  Node offer = Node_create(e, ITEM);
  while (true) {
    Node t = AtomicReference_get(this->tail),
      h = AtomicReference_get(this->head);
    if (h == t || t->type == ITEM) {
      Node n = AtomicReference_get(t->next);
      if (t == AtomicReference_get(this->tail)) {
        if (n != NULL) {
          AtomicReference_compare_and_set(this->tail, t, n);
        } else if (AtomicReference_compare_and_set(t->next, n, offer)) {
          AtomicReference_compare_and_set(this->tail, t, offer);
          $when(offer->item->value != e);
          h = AtomicReference_get(this->head);
          if (offer == AtomicReference_get(h->next))
            AtomicReference_compare_and_set(this->head, h, offer);
          return;
        }
      }
    } else {
      Node n = AtomicReference_get(h->next);
      if (t != AtomicReference_get(this->tail) ||
          h != AtomicReference_get(this->head) ||
          n == NULL) {
        continue;
      }
      bool success = AtomicInteger_compareAndSet(n->item, -1, e);
      AtomicReference_compare_and_set(this->head, h, n);
      if (success)
        return;
    }
  } // end of while loop
}

T Queue_deq(Queue this) {
  Node offer = Node_create(-1, RESERVATION);
  while (true) {
    Node t = AtomicReference_get(this->tail),
      h = AtomicReference_get(this->head);
    if (h == t || t->type == RESERVATION) {
      Node n = AtomicReference_get(t->next);
      if (t == AtomicReference_get(this->tail)) {
        if (n != NULL) {
          AtomicReference_compare_and_set(this->tail, t, n);
        } else if (AtomicReference_compare_and_set(t->next, n, offer)) {
          AtomicReference_compare_and_set(this->tail, t, offer);
          $when(offer->item->value != -1);
          h = AtomicReference_get(this->head);
          if (offer == AtomicReference_get(h->next))
            AtomicReference_compare_and_set(this->head, h, offer);
          return AtomicInteger_get(offer->item);
        }
      }
    } else {
      Node n = AtomicReference_get(h->next);
      if (t != AtomicReference_get(this->tail) ||
          h != AtomicReference_get(this->head) ||
          n == NULL) {
        continue;
      }
      T item = AtomicInteger_get(n->item);
      // added by Josh to correct defect...
      if (item == -1) continue;
      bool success = AtomicInteger_compareAndSet(n->item, item, -1);
      AtomicReference_compare_and_set(this->head, h, n);
      if (success) {
        return item;
      }
    }
  } // end of while loop
}

void Queue_print(Queue this) {
  Node prev = AtomicReference_get(this->head),
    curr = AtomicReference_get(prev->next);
  $print("{ ");
  while (curr != NULL) {
    int val = AtomicInteger_get(curr->item);
    $print(val);
    if (curr->type == RESERVATION)
      $print("[R] ");
    else
      $print(" ");
    prev = curr;
    curr = AtomicReference_get(curr->next);
  }
  $print("}");
}

#ifdef _SYNCHRONOUS_DUAL_QUEUE
/* 2N threads: even ones enqueue, odd ones dequeue.  Should never get
   stuck and should always result in an empty queue.  */
void testBalanced(int N) {
  $assert(N>=1);
  int nthread=2*N;
  tid_init(nthread);
  Queue_initialize(nthread);
  Queue q = Queue_create();
  $parfor (int i: 0..nthread-1) {
    tid_register(i);
    if (i%2 == 0) {
      Queue_enq(q, i);
    }
    else {
      int result = Queue_deq(q);
      $assert(result >= 0 && result<=2*nthread-2 && result%2==0);
    }
    Queue_terminate(i);
    tid_unregister();
  }
  $print("Done: ");
  Queue_print(q);
  $print("\n");
  Queue_destroy(q);
  Queue_finalize();
  tid_destroy();
}

/* All threads enqueue.  This should always get stuck. */
void testEnqs(int nthread) {
  $assert(nthread >= 1);
  tid_init(nthread);
  Queue_initialize(nthread);
  Queue q = Queue_create();
  $parfor (int i: 0..nthread-1) {
    tid_register(i);
    Queue_enq(q, i);
    Queue_terminate(i);
    tid_unregister();
  }
  $print("Done: ");
  Queue_print(q);
  $print("\n");
  Queue_destroy(q);
  Queue_finalize();
  tid_destroy();
}

/* Three threads: one enqueues, the other two dequeue.  Should get
   stuck. */
void testEDD() {
  int nthread=3;
  tid_init(nthread);
  Queue_initialize(nthread);
  Queue q = Queue_create();
  int ndeqdone = 0;
  $parfor (int i: 0..nthread-1) {
    tid_register(i);
    if (i==0)
      Queue_enq(q, i);
    else {
      int x = Queue_deq(q);
      ndeqdone++;
      $assert(ndeqdone <= 1);
      $assert(Queue_stuck() || x >= 0);
    }
    Queue_terminate(i);
    tid_unregister();
  }
  $assert(Queue_stuck());
  Queue_destroy(q);
  Queue_finalize();
  tid_destroy();
}

void testEED() {
  int nthread=3;
  tid_init(nthread);
  Queue_initialize(nthread);
  Queue q = Queue_create();
  int nenqdone = 0;
  $parfor (int i: 0..nthread-1) {
    tid_register(i);
    if (i<=1) {
      Queue_enq(q, i);
      nenqdone++;
      $assert(nenqdone <= 1);
    } else {
      int x = Queue_deq(q);
      $assert(x >= 0);
    }
    Queue_terminate(i);
    tid_unregister();
  }
  Queue_destroy(q);
  Queue_finalize();
  tid_destroy();
}

int main() {
  testBalanced(1);
  //testBalanced(2);
  //testEnqs(1);
  //testEnqs(2);
  //testEDD();
  //testEED();
}
#endif
