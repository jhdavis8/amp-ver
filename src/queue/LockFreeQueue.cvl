/* CIVL model of LockFreeQueue from "The Art of Multiprocessor
 * Programming" 2nd ed, by Herlihy, Luchangco, Shavit, and Spear,
 * Sec. 10.5 "A lock-free unbounded queue", and companion code
 * ch10/Queue/src/queue/LockFreeQueue.java.
 *
 * This is an unbounded queue implementation using lazy
 * synchronization and no locks.  Where they differ, we follow the
 * code from the book text, not the companion code.  This means no use
 * of multiCompareAndSet.
 *
 * The original Java code relies on the garbage collector to reclaim
 * memory.  CIVL-C, like C, requires manual memory management.
 * Protocols for manually managing memory for this data structure are
 * complicated and are described in Section 10.6 of the text.  We do
 * not implement those here. Hence this CIVL model does leak memory.
 *
 * Created  : 2021-01-19
 * Modified : 2024-12-13
 * Authors  : Josh Davis and Stephen F. Siegel
 * Verified Software Laboratory, Dept. Computer & Info. Sciences,
 * University of Delaware.
 */
#include "AtomicReference.cvh"
#include "Queue.h"
#include "types.h"
#include <limits.h>
#include <stdbool.h>
#include <stdlib.h>

typedef struct Node {
  T value;
  AtomicReference next;
} * Node;

static Node node_create(T value) {
  Node this = malloc(sizeof(struct Node));
  this->value = value;
  this->next = AtomicReference_create(NULL);
  return this;
}

// not in original code...
static void node_destroy(Node this) {
  AtomicReference_destroy(this->next);
  free(this);
}

struct Queue {
  AtomicReference head;
  AtomicReference tail;
};

void Queue_initialize(int nthread) {
}

void Queue_finalize(void) {
}

void Queue_terminate(int tid) {
}

bool Queue_stuck(void) {
  return false;
}

Queue Queue_create() {
  Queue this = malloc(sizeof(struct Queue));
  Node node = node_create(-1); // new Node(null)
  this->head = AtomicReference_create(node);
  this->tail = AtomicReference_create(node);
  return this;
}

// not in original code...
void Queue_destroy(Queue queue) {
  // if node is not null, its next is not null
  Node curr = AtomicReference_get(queue->head);
  Node prev = NULL;
  while (curr != NULL) {
    prev = curr;
    curr = AtomicReference_get(curr->next);
    node_destroy(prev);
  }
  AtomicReference_destroy(queue->head);
  AtomicReference_destroy(queue->tail);
  free(queue);
}

void Queue_enq(Queue this, T value) {
  Node node = node_create(value);
  while (true) {
    Node last = AtomicReference_get(this->tail);
    Node next = AtomicReference_get(last->next);
    // look at book Fig. 10.11, not companion code...
    if (last == AtomicReference_get(this->tail)) {
      if (next == NULL) {
        if (AtomicReference_compare_and_set(last->next, next, node)) {
          AtomicReference_compare_and_set(this->tail, last, node);
          return;
        }
      } else {
        AtomicReference_compare_and_set(this->tail, last, next);
      }
    }
  }
}

T Queue_deq(Queue this) {
  while (true) {
    Node first = AtomicReference_get(this->head);
    Node last = AtomicReference_get(this->tail);
    Node next = AtomicReference_get(first->next);
    if (first == AtomicReference_get(this->head)) {
      if (first == last) {
        if (next == NULL) {
          return -1; // throw new EmptyException
        }
        AtomicReference_compare_and_set(this->tail, last, next);
      } else {
        T value = next->value;
        if (AtomicReference_compare_and_set(this->head, first, next)) {
          return value;
        }
      }
    }
  }
}

// not in original...
void Queue_print(Queue queue) {
  Node curr = AtomicReference_get(queue->head);
  curr = AtomicReference_get(curr->next);
  $print("{");
  while (curr) {
    $print(curr->value, " ");
    curr = AtomicReference_get(curr->next);
  }
  $print("}\n");
  return;
}

#ifdef _LOCK_FREE_QUEUE_MAIN
int main() {
  Queue q = Queue_create();
  $parfor(int i : 1..5) {
    Queue_enq(q, i);
  }
  Queue_print(q);
  int x = Queue_deq(q);
  Queue_print(q);
  $assert(x == 1 || x == 2 || x == 3 || x == 4 || x == 5);

  int y[3];
  $parfor(int i : 0..2) {
    y[i] = Queue_deq(q);
  }
  $for(int i : 0..2) {
    $assert(y[i] == 1 || y[i] == 2 || y[i] == 3 || y[i] == 4 || y[i] == 5);
  }
  Queue_print(q);

  int z = Queue_deq(q);
  Queue_print(q);
  $assert(z == 1 || z == 2 || z == 3 || z == 4 || z == 5);
  $assert(Queue_deq(q) == -1);
  Queue_destroy(q);
}
#endif
