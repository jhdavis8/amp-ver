#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <seq.cvh>
#include "types.h"
#include "Set.h"
#include "driver.h"

#ifndef INITIAL_CAPACITY
#define INITIAL_CAPACITY 2
#endif

// sequence of values sorted
typedef struct SimpleSet {
  int data[];
  int capacity;
} * SimpleSet;

void * collection_create() {
  return Set_create();
}

void collection_destroy(void * c) {
  Set_destroy(c);
}

bool collection_add(void * c, int a0, int a1) {
  return (int)Set_add(c, a0);
}

bool collection_contains(void * c, int a) {
  return Set_contains(c, a);
}

int collection_remove(void * c, int a) {
  return (int)Set_remove(c, a);
}

void collection_print(void * c) {
  Set_print(c);
}

void * oracle_create() {
  SimpleSet oracle = malloc(sizeof(struct SimpleSet));
  $seq_init(&oracle->data, 0, NULL);
  oracle->capacity = INITIAL_CAPACITY;
  return oracle;
}

void oracle_destroy(void * o) {
  free(o);
}

// add enabled iff the number of elements in the set is less than the capacity
// and a0 is not already in the set
bool oracle_add_enabled(void * o, int a0, int a1) {
  SimpleSet oracle = (SimpleSet)o;
  if ($seq_length(&oracle->data) >= oracle->capacity) return false;
  int i=0, n = $seq_length(&oracle->data);
  while (i<n && oracle->data[i] < a0) i++;
  if (i<n && oracle->data[i] == a0) return false;
  return true;
}

// inserts a0 in the right spot. a1 is ignored.
bool oracle_add(void * o, int a0, int a1) {
  $assert(oracle_add_enabled(o, a0, a1));
  SimpleSet oracle = (SimpleSet)o;
  int i=0, n = $seq_length(&oracle->data);
  while (i<n && oracle->data[i] < a0) i++;
  if (i<n && oracle->data[i] == a0) return false;
  $seq_insert(&oracle->data, i, &a0, 1);
  return true;
}

bool oracle_contains(void * o, int a) {
  SimpleSet oracle = (SimpleSet)o;
  int i=0, n = $seq_length(&oracle->data);
  while (i<n && oracle->data[i] < a) i++;
  if (i<n && oracle->data[i] == a) return true;
  return false;
}

// remove is enbled iff a is present in the set
bool oracle_remove_enabled(void * o, int a, int expect) {
  SimpleSet oracle = (SimpleSet)o;
  int i=0, n = $seq_length(&oracle->data);
  while (i<n && oracle->data[i] < a) i++;
  if (i<n && oracle->data[i] == a) return true;
  return false;
}

// removes a if present. expect is ignored.
int oracle_remove(void * o, int a, int expect) {
  $assert(oracle_remove_enabled(o, a, expect));
  SimpleSet oracle = (SimpleSet)o;
  int i=0, n = $seq_length(&oracle->data);
  while (i<n && oracle->data[i] < a) i++;
  if (i<n && oracle->data[i] == a) {
    $seq_remove(&oracle->data, i, NULL, 1);
    return 1;
  }
  return 0;
}

void oracle_print(void * o) {
  SimpleSet oracle = (SimpleSet)o;
  int n = $seq_length(&oracle->data);
  printf("{ ");
  for (int i=0; i<n; i++) {
    printf("%d ", oracle->data[i]);
  }
  printf("}");
}
