/* CIVL model of class LazyList from "The Art of Multiprocessor
 * Programming" 2nd ed, by Herlihy, Luchangco, Shavit, and Spear,
 * Sec. 9.7, "Lazy synchronization", and companion code
 * ch9/src/lists/LazyList.java.
 *
 * Authors : Wenhao Wu, Eric Kurtz, Josh Davis, Stephen F. Siegel
 * Created : 2018-05-01
 * Modified: 2024-12-13
 *
 * Verified Software Lab, Dept. Computer & Info. Sci., 
 * University of Delaware
 */
#include "Lock.h"
#include "Set.h"
#include "hash.cvh"
#include "types.h"
#include <limits.h>
#include <stdbool.h>
#include <stdlib.h>

typedef struct Node {
  T item;
  int key;
  struct Node * next;
  bool marked;
  Lock lock;
} * Node;

static Node node_create(T item) {
  Node this = malloc(sizeof(struct Node));
  this->item = item;
  this->key = hash_code(item);
  this->next = NULL;
  this->marked = false;
  this->lock = Lock_create();
  return this; 
}

static Node node_create_sentinel(T key) {
  Node this = malloc(sizeof(struct Node));
  this->item = -1; // null
  this->key = key;
  this->next = NULL;
  this->marked = false;
  this->lock = Lock_create();
  return this;  
}

static void node_destroy(Node node) {
  Lock_destroy(node->lock);
  free(node);
}

static void node_destroy_rec(Node node) {
  if (node == NULL) return;
  node_destroy_rec(node->next);
  node_destroy(node);
}

struct Set {
  Node head;
};

void Set_initialize(int nthread) {
}

void Set_finalize(void) {
}

void Set_terminate(int tid) {
}

bool Set_stuck(void) {
  return false;
}

Set Set_create() {
  Set this = malloc(sizeof(struct Set));
  this->head = node_create_sentinel(INT_MIN);
  this->head->next = node_create_sentinel(INT_MAX);
  return this;
}

void Set_destroy(Set list) {
  node_destroy_rec(list->head);
  free(list);
}

void Set_print(Set this) {
  Node curr = this->head->next;
  $print("{ ");
  while (curr->next != NULL) {
    $print(curr->item, " ");
    curr = curr->next;
  }
  $print("}");
}

static bool validate(Set this, Node pred, Node curr) {
  return !pred->marked && !curr->marked && pred->next == curr;
}

bool Set_add(Set this, T item) {
  int key = hash_code(item);
  while (true) {
    Node pred = this->head;
    Node curr = this->head->next;
    while (curr->key < key) {
      pred = curr;
      curr = curr->next;
    }
    Lock_acquire(pred->lock);
    // try...
    Lock_acquire(curr->lock);
    // try...
    if (validate(this, pred, curr)) {
      if (curr->key == key) {
	Lock_release(curr->lock); // finally
	Lock_release(pred->lock); // finally
	return false;
      } else {
	Node node = node_create(item);
	node->next = curr; 
	pred->next = node;
	Lock_release(curr->lock); // finally
	Lock_release(pred->lock); // finally
	return true;
      }
    }
    Lock_release(curr->lock);
    Lock_release(pred->lock);
  }
}

bool Set_remove(Set this, T item) {
  int key = hash_code(item);
  while (true) {
    Node pred = this->head;
    Node curr = this->head->next;
    while (curr->key < key) {
      pred = curr;
      curr = curr->next;
    }
    Lock_acquire(pred->lock);
    // try...
    Lock_acquire(curr->lock);
    // try...
    if (validate(this, pred, curr)) {
      if (curr->key == key) {
	curr->marked = true;
	pred->next = curr->next;
	Lock_release(curr->lock); // finally
	Lock_release(pred->lock); // finally
	return true;
      } else {
	Lock_release(curr->lock); // finally
	Lock_release(pred->lock); // finally
	return false;
      }
    }
    Lock_release(curr->lock);
    Lock_release(pred->lock);
  }
}

bool Set_contains(Set this, T item) {
  int key = hash_code(item);
  Node curr = this->head;
  while (curr->key < key)
    curr = curr->next;
  return curr->key == key && !curr->marked;
}

#ifdef _LAZY_LIST_MAIN
void main() {
  const int N=3; // number of threads
  Set list = Set_create();
  $parfor(int i: 0 .. N-1) {
    Set_add(list, i);
  }
  Set_print(list);
  $print("\n");
  Set_destroy(list);
  list = Set_create();
  $parfor (int i: 0 .. N-1) {
    int result = Set_add(list, i);
    $assert(result);
    result = Set_contains(list, i);
    $assert(result);
    result = Set_remove(list, i);
    $assert(result);
    result = Set_contains(list, i);
    $assert(!result);
  }
  Set_print(list);
  $print("\n");
  Set_destroy(list);
}
#endif
